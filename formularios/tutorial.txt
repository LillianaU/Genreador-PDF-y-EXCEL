crear proyecto:

python -m venv venv
source venv/bin/activate  # En Linux/Mac
venv\Scripts\activate     # En Windows

PS C:\Users\LILLYU\Documents\GitHub\formularios\ven> Scripts\actívate

2. Instalar Django y las dependencias

pip install django mysqlclient reportlab

3. Crear el proyecto Django y la aplicación

django-admin startproject mi_proyecto

cd mi_proyecto

django-admin startapp documentos

4. Configurar la base de datos en settings.py
Edita mi_proyecto/settings.py y agrega la configuración de MySQL:

python
Copiar
Editar
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ejemplo',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}
También agrega la aplicación documentos a INSTALLED_APPS:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'documentos',
]

5. Crear la vista para buscar un documento y generar PDF en documentos/views.py

from django.shortcuts import render  # Permite renderizar plantillas HTML
from django.http import HttpResponse  # Se usa para enviar respuestas HTTP, como PDFs
from django.db import connection  # Permite interactuar con la base de datos manualmente
from reportlab.lib.pagesizes import letter  # Define el tamaño de página para el PDF
from reportlab.pdfgen import canvas  # Permite generar archivos PDF

def index(request):  # Define la función de vista para la página principal
    usuario = None  # Inicializa la variable usuario en None

    if request.method == 'POST':  # Verifica si la solicitud es de tipo POST
        id_usuario = request.POST.get('id_usuario')  # Obtiene el ID del usuario del formulario
        
        with connection.cursor() as cursor:  # Abre una conexión con la base de datos
            cursor.execute("SELECT * FROM usuarios WHERE id = %s", [id_usuario])  # Ejecuta la consulta SQL
            columns = [col[0] for col in cursor.description]  # Obtiene los nombres de las columnas
            row = cursor.fetchone()  # Obtiene la primera fila de resultados
            
            if row:  # Verifica si se encontró un usuario con el ID proporcionado
                usuario = dict(zip(columns, row))  # Convierte la fila en un diccionario

    return render(request, 'documentos/index.html', {'usuario': usuario})  
    # Renderiza la plantilla `index.html` y envía el usuario encontrado
####################################################################################################3
def generar_pdf(request, id_usuario):  # Define la función para generar el PDF de un usuario
    with connection.cursor() as cursor:  # Abre una conexión con la base de datos
        cursor.execute("SELECT * FROM usuarios WHERE id = %s", [id_usuario])  # Ejecuta la consulta SQL
        columns = [col[0] for col in cursor.description]  # Obtiene los nombres de las columnas
        row = cursor.fetchone()  # Obtiene la primera fila de resultados

        if row:  # Verifica si se encontró un usuario
            usuario = dict(zip(columns, row))  # Convierte la fila en un diccionario

            response = HttpResponse(content_type='application/pdf')  # Crea la respuesta como un archivo PDF
            response['Content-Disposition'] = f'attachment; filename="usuario_{id_usuario}.pdf"'  
            # Configura el nombre del archivo para descargar

            pdf = canvas.Canvas(response, pagesize=letter)  # Crea un nuevo documento PDF
            pdf.drawString(100, 750, "Información del Usuario")  # Escribe un título en el PDF
            pdf.drawString(100, 730, f"ID: {usuario['id']}")  # Escribe el ID del usuario
            pdf.drawString(100, 710, f"Nombre: {usuario['nombre']}")  # Escribe el nombre del usuario
            pdf.drawString(100, 690, f"Correo: {usuario['correo']}")  # Escribe el correo del usuario
            pdf.drawString(100, 670, f"Teléfono: {usuario['telefono']}")  # Escribe el teléfono del usuario
            pdf.drawString(100, 650, f"Dirección: {usuario['direccion']}")  # Escribe la dirección del usuario
            pdf.drawString(100, 630, f"Fecha de Creación: {usuario['fecha_creacion']}")  # Escribe la fecha de creación del usuario

            pdf.save()  # Guarda el PDF
            return response  # Devuelve el archivo PDF para descarga

    return HttpResponse("Usuario no encontrado", status=404)  # Si no encuentra el usuario, devuelve un error 404


6. Configurar las rutas en documentos/urls.py

from django.urls import path
from .views import index, generar_pdf

urlpatterns = [
    path('', index, name='index'),
    path('generar_pdf/<int:id_usuario>/', generar_pdf, name='generar_pdf'),
]

7. Incluir las rutas en
mi_proyecto/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('documentos.urls')),
]


8. Crear la plantilla documentos/templates/documentos/index.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Buscar Documento</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="d-flex justify-content-center align-items-center vh-100">
    <div class="container">
        <div class="card p-4 shadow">
            <h2 class="text-center">Buscar Documento</h2>
            <form method="POST">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="id_usuario" class="form-label">ID del Usuario</label>
                    <input type="number" class="form-control" id="id_usuario" name="id_usuario" required>
                </div>
                <button type="submit" class="btn btn-primary w-100">Buscar</button>
            </form>

            {% if usuario %}
            <div class="mt-4">
                <h4>Datos del Usuario</h4>
                <p><strong>Nombre:</strong> {{ usuario.nombre }}</p>
                <p><strong>Correo:</strong> {{ usuario.correo }}</p>
                <p><strong>Teléfono:</strong> {{ usuario.telefono }}</p>
                <p><strong>Dirección:</strong> {{ usuario.direccion }}</p>
                <p><strong>Fecha de Creación:</strong> {{ usuario.fecha_creacion }}</p>
                <a href="{% url 'generar_pdf' usuario.id %}" class="btn btn-danger w-100">Generar PDF</a>
            </div>
            {% endif %}
        </div>
    </div>
</body>
</html>


9. Ejecutar la aplicación
python manage.py runserver

Para detener el servidor de desarrollo de Django, simplemente presiona CTRL + C en la terminal donde se está ejecutando python manage.py runserver.

pkill -f runserver

